<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hirotaka Kawashima</title>
    <link>https://khirotaka.github.io/</link>
    <description>Recent content on Hirotaka Kawashima</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 05 Aug 2020 23:32:44 +0900</lastBuildDate>
    
	<atom:link href="https://khirotaka.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Paper Reading] Unsupervised Scalable Representation Learning for Multivariate Time Series</title>
      <link>https://khirotaka.github.io/post/unsupervised_scalable_representation_learning_for_multivariate_time_series/</link>
      <pubDate>Wed, 05 Aug 2020 23:32:44 +0900</pubDate>
      
      <guid>https://khirotaka.github.io/post/unsupervised_scalable_representation_learning_for_multivariate_time_series/</guid>
      <description>自分の参加している機械学習勉強会で発表するために読んだ論文のメモ書き。 このサイトを $\TeX{}$ 対応させたのもこの記事を書きたかったがため。
　NeurIPS 2019の採用論文で、多変量時系列データを対象に埋め込み表現を作るという内容。 要は時系列データ相手のWord2Vec。
　論文は こちら。 (NeurIPS版よりもarXiv版の方がAppendixが付いていて、より詳細なのでオススメ)著者が公開しているコードは GitHub で公開されている。
Abstract 　時系列の普遍的な埋め込み表現を学習する教師なし法の提案。Causal Dilated Convolutionを使ったエンコーダと時間ベースのネガティブサンプリングを使用するTriplet Lossを組み合わせて可変長・多変量時系列の汎用表現を取得することができる。
利点 &amp;hellip; 長さに関してスケーラブル。
Intro 　NLPや画像分野ではたくさんの表現学習についての研究が行われているが、時系列用の汎用的な表現学習についての研究は少ない。
なぜか
 時系列データにラベル付けされている事がほとんどないか、あってもまばら。 時系列データの長さが同じでなくても同じ表現を返す必要がある。 学習時間と推論時間の両方でスケーラビリティと効率性が重要であり、実際に遭遇する短い時系列と長い時系列の両方に対応しなければならない  　評価実験は UCR/UEA 時系列データベースにあるデータセットを使って評価した。(CNNベースのエンコーダを用いて時系列の汎用表現を計算して、SVMで分類する)
訓練 　最終的な目的としては、似たような時系列データが入力された時、似た様な表現を出力される様にしたい。しかもそれを教師なしで。 まず、Triplet Lossを使えば、前者(似た様な系列が来たら似た様な表現を返す)を達成するが可能になるが、元々教師ある学習用の関数なので、後者を解決する。
Triplet Lossとは $$ \mathcal{L}(A, P, N) = \max\Bigl( ||f(A) - f(P)||^2 - ||f(A) - f(N)||^2 + \alpha, 0\Bigr) $$
　ここで、$A$ はアンカー入力、$P$は$A$と同じクラスで、ポジティブ入力と呼び、$N$はネガティブ入力と呼ばれ、$A$とは異なるクラス。$\alpha$はポシティブとネガティブのペアの間のマージン。$f$は埋め込み。
このLossが0になれば、同じクラス同士の表現は違い表現を、違うクラス同士の表現は全く違う表現を出力できるネットワークが完成する。
　この論文のTriplet lossはword2vecを参考にしている。Word2Vecの一種にCBOWモデルというものがある。CBOWモデルで使われる手法にNegative Sampling というのがある。</description>
    </item>
    
    <item>
      <title>LaTeX Test</title>
      <link>https://khirotaka.github.io/post/latex_test/</link>
      <pubDate>Thu, 23 Jul 2020 21:12:35 +0900</pubDate>
      
      <guid>https://khirotaka.github.io/post/latex_test/</guid>
      <description>このサイトも$\TeX{}$に対応した。$\LaTeX{}$ ってできる。
ここで $x = 2$である。また$F(x) = \frac{1}{5}x^2 + 2$
 $$ A = \left[ \begin{array}{rrr} -1 &amp; 20 &amp; 3 \\ 4 &amp; -5 &amp; 600 \\ 7 &amp; 8 &amp; -9 \end{array} \right] $$  $$ \mathcal{L}(A, P, N) = \max\Bigl( ||f(A) - f(P)||^2 - ||f(A) - f(N)||^2 + \alpha, 0\Bigr) $$
$$ \mathcal{L}(x^{ref}, x^{pos}, x^{neg}) = -\log\Bigl(\sigma\bigl(f(\mathcal{x}^{ref}, \mathcal{\theta}) ^\mathrm{T} f(\mathcal{x}^{pos}, \mathcal{\theta})\bigr)\Bigr) - \sum^K_{k=1}\log\Bigl(\sigma\bigl(-f(\mathcal{x}^{ref}, \mathcal{\theta}) ^\mathrm{T}f(\mathcal{x}_k^{neg}, \mathcal{\theta})\bigr)\Bigl) $$</description>
    </item>
    
    <item>
      <title>Hello Rust</title>
      <link>https://khirotaka.github.io/post/hello_rust/</link>
      <pubDate>Wed, 22 Jul 2020 21:17:20 +0900</pubDate>
      
      <guid>https://khirotaka.github.io/post/hello_rust/</guid>
      <description>最近Pythonも程々に書けるようになってきたし、そろそろ静的型付けな言語書きたいなってなってきたのと、 自分のTLでRustがジワジワ盛り上がってるのに感化されてRustに入門してみた。
そこで、今日はRust用のIDEのセットアップについてメモっておく。
Rust用IDEの世界 　Rustの開発に使われるIDEランキング1位はどうやらMSのVSCodeらしい(ちなみにこのページを書くためのエディタはVSCodeを使ってる。)。 2位、3位はVimとJetBrainsのIntelliJ IDEAが続くとのこと。(参照: プログラミング言語「Rust」の普及に立ちはだかる壁)
VSCodeは確かに良いエディタなのだが、設計思想が個人的に合わないのでパス。Vimはサーバーを弄る時とか簡単なコードを書くために常用しているが、 流石にライブラリを書いたり、メソッドを弄りまくったりする場合にvimだと流石にツライ。 ということで、日頃からPyCharmでお世話になっているJetBrainsのIDEを使ってRustを書いて行こうと思う。
CLionのインストールとIntelliJ Rustのインストール CLionはC/C++用のIDEで最新の2020.1とかだと、CUDAをサポートし始めている界隈だと有名なIDEの１つ。 インストールは簡単で、JetBrains Toolboxがインストール済みならボタンひとつで完了する。
 JetBrains Toolboxを使ってCLionをインストールする   インストールが完了すると、初回起動時に設定をインポートするかどうか聞かれるが、その際は適宜設定すること。
 この次に出てくるカスタマイズ画面(Featured plugins)でRustのプラグインを導入する。  これで準備完了。
Rustプロジェクトの作成 　トップ画面の New Projectをクリック、下の画面になる。 OtherのところにあるRustを選択し、事前にインストールした~/.cargo/binを指定していることを確認し、 Location にプロジェクト名を指定してプロジェクトをCreateする。標準ライブラリがない場合は、Download via rustup でDLする。
この設定画面は、cargo new PROJECT_NAME —bin をラップしているだけなので、Cargoの仕様(プロジェクト名に . を含めない等)に注意しないと、Cargo環境が整備されない事に注意  あとは、PyCharmと同じく右クリックしてRunすればいい  　これでCLion + IntelliJ Rustを使ったRust開発環境が完成。次回はRustを使ってPython用のモジュールを書いていく。(いつになるか知らないけど)
 うまくJTBCに転がり込む事ができました(笑)</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://khirotaka.github.io/about/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://khirotaka.github.io/about/</guid>
      <description>I&amp;rsquo;m Hirotaka Kawashima (川島 寛隆).
  Kaggle
 ASHRAE - Great Energy Predictor III 🥈 Bengali.AI Handwritten Grapheme Classification APTOS 2019 Blindness Detection    GitHub
 [Implementation example] SAnD Model Enchanter - Library for Machine Learning Tasks.    </description>
    </item>
    
    <item>
      <title>Deploying to GitHub Pages using Hugo &amp; Shell script.</title>
      <link>https://khirotaka.github.io/post/how_to_deploy/</link>
      <pubDate>Tue, 16 Jun 2020 00:03:27 +0900</pubDate>
      
      <guid>https://khirotaka.github.io/post/how_to_deploy/</guid>
      <description>Introduction このページはHugo を使ってMarkdownを元にHTMLを生成している。
Hugoのテーマ設定だとかは検索すると無限に出てくる既存の記事を参考にしてもらい、 「記事の作成方法」と、「確認」、「デプロイ」の手順をメモっておく。
Generate an empty blog post まず記事を作るためには原稿用紙が必要になるように、記事を書くにもコマンドを叩く必要がある。
hugo new posts/~~~~~.md このようにすれば、content/ディレクトリ直下の post/ ディレクトリ内に ~~~~~.md ファイルが生成される。 あとは、普通にMarkdownを書けばいい。
Validation ローカルマシン上で試しにWebサイトを建てるには、以下のようにする。
hugo server こうすれば、先に用意した記事をちゃんとサイトの形にしてくれる。
ただし、 draft: true にしている記事は生成されないので、 これも生成したい場合は、
hugo server -D とする。
Deplying 次のshellスクリプトをリポジトリルートに用意する。 後は実行権限を与えて動かせば、OK
#!/bin/bash hugo cp -r public/* ../XXXXXX.github.io </description>
    </item>
    
    <item>
      <title>Hello World@khirotaka.github.io</title>
      <link>https://khirotaka.github.io/post/hello/</link>
      <pubDate>Mon, 15 Jun 2020 20:40:11 +0900</pubDate>
      
      <guid>https://khirotaka.github.io/post/hello/</guid>
      <description>はじめに HugoとGitHub Pagesを使って生成したポートフォリオ兼ブログみたいなページ。
三日坊主のプログラミング日誌 から移行するつもりはないので、 ここと向こう両方使っていくつもり</description>
    </item>
    
  </channel>
</rss>